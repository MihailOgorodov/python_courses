# Чтобы подключить библиотеку к Вашей программе необходимо написать
# следующее:
# import pandas as pd
# Прочтем файл .csv(он находится в Google Colab в папке sample_data) с помощью
# библиотеки pandas
# df = pd.read_csv('sample_data/california_housing_train.csv')
# Для того чтобы прочитать первые n строк таблицы, необходимо воспользоваться
# следующей функцией:
# DataFrame.head(n=5)
# Если Вы ничего не укажете в круглых скобках, то ошибка не вылезет, по
# умолчанию будут выведены первые 5 строк таблицы.
# df.head()
# функция, которая показывает последние 5 строк таблицы.
# df.tail()
# сколько строк и столбцов находится внутри таблицы
# df.shape
# Чтобы обнаружить пустые значения в таблице данных необходимо воспользоваться
# функцией
# df.isnull()
# Данная функция выведет количество null-значений в каждой ячейке по столбцам.
# df.isnull().sum()
# Тип данных столбцов
# df.dtypes
# Название столбцов
# df.columns
# Если Вы хотите вывести 1 столбец на экран, то можно указать следующее
# выражение, которое позволит это сделать.
# df['latitude']
# df[['latitude', 'population']]
# Необходимо вывести столбец total_rooms, у которого медианный возраст
# здания(housing_median_age) меньше 20.
# df[df['housing_median_age'] < 20]
# df[(df['housing_median_age'] > 20) & (df['total_rooms'] > 2000)]
# Максимальное значение:
# print(df['population'].max())
# Результат:
# 35682.0
# Минимальное значение:
# print(df['population'].min())
# Результат:
# 3.0
# Среднее значение:
# print(df['population'].mean())
# Результат:
# 1429.5739411764705
# Сумма:
# print(df['population'].sum())
# Результат:
# 24302757.0
# Медианное значение для нескольких столбцов:
# df[['population', 'total_rooms']].median()
# Получить общую картину можно простой командой describe
# df.describe()
# count - Общее кол-во не пустых строк
# mean - среднее значение в столбце
# std - стандартное отклонение от среднего значения
# min - минимальное значение
# max - максимальное значение
# Числа 25%, 50%, 75% - перцентили

# Графика
# Scatterplot (Точечный график)
# Для того чтобы начать работу с библиотекой seaborn, ее необходимо импортировать
# к себе в программу:
# import seaborn as sns
# Изображение точек долготы по отношению к широте:
# sns.scatterplot(data=df, x="longitude", y="latitude")
# Помимо двумерных отношений, мы можем добавить "дополнительное измерение" с
# помощью цвета. В данном случае опять же достаточно очевидное отношение, чем
# выше кол-во семей, тем выше кол-во людей и соответственно комнат.
# sns.scatterplot(data=df, x="households", y="population", hue="total_rooms")
# Добавляем размер точек
# sns.scatterplot(data=df, x="households", y="population", hue="total_rooms", size = 10)
#
# Мы можем визуализировать сразу несколько отношений, используя класс PairGrid
# внутри seaborn. PairGrid принимает как аргумент pandas DataFrame и
# визуализирует все возможные отношения между ними, в соответствии с
# выбранным типом графика.
# cols = ['population', 'median_income', 'housing_median_age',
# 'median_house_value']
# g = sns.PairGrid(df[cols])
# g.map(sns.scatterplot)

Линейные графики
Хорошо подойдут, если есть временная или какая-либо иная последовательность и
значения, которые могут меняться в зависимости от нее. Для генерации линейных
графиков в seaborn используется relplot функцию. Она также принимает
DataFrame, x, y - столбцы.
Для визуализации выбирается тип line:
sns.relplot(x="latitude", y="median_house_value", kind="line", data=df)
Попробуем визуализировать longitude по отношения к median_house_value
sns.relplot(x = 'longitude', y = 'median_house_value', kind = 'line', data = df)

Гистограмма
Способ представления табличных данных в графическом виде — в виде столбчатой
диаграммы. По оси x обычно указывают значение, а по оси y - встречаемость(кол-во
таких значений в выборке)
sns.histplot(data=df, x="median_income")
Изобразим гистограмму по housing_median_age.
sns.histplot(data = df, x = 'housing_median_age')
Давайте посмотрим медианный доход у пожилых жителей.
sns.histplot(data=df[df['housing_median_age']>50], x="median_income")
Давайте разобьем возрастные группы на 3 категории те кто моложе 20 лет, от 20 до
50 и от 50, чтобы посмотреть влияет ли это на доход.
df.loc[df['housing_median_age'] <= 20, 'age_group'] = 'Молодые'
df.loc[(df['housing_median_age'] > 20) & (df['housing_median_age'] <= 50),
'age_group'] = 'Ср. возраст'
df.loc[df['housing_median_age'] > 50, 'age_group'] = 'Пожилые'
Применим group_by, чтобы получить среднее значение.
df.groupby('age_group')['median_income'].mean().plot(kind='bar')

Seaborn так же позволяет нам смотреть распределение по многим параметрам.
Давайте поделим группы по доходам на 2. Те у кого медианный доход выше 6 и те у
кого меньше. Изобразим дополнительное измерение с помощью оттенка в виде
возрастных групп и групп по доходам.
df.loc[df['median_income'] > 6, 'income_group'] = 'rich'
df.loc[df['median_income'] < 6, 'income_group'] = 'everyone_else'


